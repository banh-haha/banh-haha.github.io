import discord
from discord.ext import commands
from discord import ui
from discord import app_commands
from flask import Flask, request, render_template_string, url_for, redirect, session
import threading
import json
import re
import random
import os
import asyncio
import google.genai as genai # Th∆∞ vi·ªán cho Gemini API

# -------------------------------------------------------------
# 1. C·∫§U H√åNH BAN ƒê·∫¶U V√Ä DATA HANDLING
# -------------------------------------------------------------

# --- C·∫§U H√åNH TH√îNG S·ªê V√Ä FILE ---
os.makedirs('data', exist_ok=True)
os.makedirs('static', exist_ok=True) 
LEVELS_FILE = 'data/levels.json'
CONFIG_FILE = 'data/config.json'

# --- TH√îNG S·ªê B·∫ÆT BU·ªòC PH·∫¢I THAY ƒê·ªîI ---
TOKEN = "MTQzMDcyNDEwNzM3NjI2MzIzMA.Gk8Sv6.4rX1dQplNG412DjQlZaVyOG739ivuWobaMhqqM" # THAY TH·∫æ B·∫∞NG TOKEN BOT TH·∫¨T
SECRET_KEY = "daylamatkhaucuaban12345" 
ID_KENH_CHAO_MUNG = 1417506375369621591 
# THAY TH·∫æ B·∫∞NG KH√ìA API GEMINI C·ª¶A B·∫†N
GEMINI_API_KEY = "AIzaSyBmgS7UZw-yOfZEefb7OKHupIokMDPlk5o" 
# ----------------------------------------

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u c·∫•u h√¨nh
config = {} 
# Kh√≥a gi√° tr·ªã Background URL
DEFAULT_BACKGROUND_URL = "room.gif" 

# --- H√†m x·ª≠ l√Ω Config (JSON) ---
def load_config():
    """T·∫£i c·∫•u h√¨nh t·ª´ config.json."""
    default_config = {
        "ID_KENH_CHAO_MUNG": str(ID_KENH_CHAO_MUNG), 
        "LEVEL_REWARDS": {
            "5": "1430724107376263231", 
            "10": "1430724107376263232",
        },
        "AUTO_RESPONSES": [ 
            {"trigger": "hi", "response": "Ch√†o {mem}! Ch√∫c {mem} m·ªôt ng√†y vui v·∫ª!"},
            {"trigger": "bot", "response": "T√¥i l√† {sever} Bot. B·∫°n c·∫ßn g√¨?"}
        ],
        "CAU_CHAO_HIEN_TAI": "Ch√†o m·ª´ng {mem} ƒë·∫øn server! {soluong} th√†nh vi√™n.",
        "URL_GIF_MAIN": "https://tenor.com/view/minions-hi-hello-wave-greetings-gif-17409241.gif",
        "EMBED_CHAO_MUNG_MAU": "#3498db",
        "DASHBOARD_BACKGROUND_URL": DEFAULT_BACKGROUND_URL # ƒê·∫∑t m·∫∑c ƒë·ªãnh l√† file room.gif
    }
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'r') as f:
            try:
                loaded_config = json.load(f)
                for key, default_val in default_config.items():
                    if key not in loaded_config:
                        loaded_config[key] = default_val
                # KH√ìA BACKGROUND: Lu√¥n √©p gi√° tr·ªã v·ªÅ DEFAULT_BACKGROUND_URL
                loaded_config["DASHBOARD_BACKGROUND_URL"] = DEFAULT_BACKGROUND_URL 
                save_config(loaded_config)
                return loaded_config
            except json.JSONDecodeError:
                print(f"C·∫¢NH B√ÅO: File {CONFIG_FILE} b·ªã l·ªói c·∫•u tr√∫c. S·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh.")
                return default_config
    else:
        save_config(default_config)
        return default_config

def save_config(new_config):
    """L∆∞u c·∫•u h√¨nh v√†o config.json."""
    # KH√ìA BACKGROUND: Tr∆∞·ªõc khi l∆∞u, ƒë·∫£m b·∫£o gi√° tr·ªã v·∫´n l√† DEFAULT_BACKGROUND_URL
    new_config["DASHBOARD_BACKGROUND_URL"] = DEFAULT_BACKGROUND_URL 
    with open(CONFIG_FILE, 'w') as f:
        json.dump(new_config, f, indent=4)

def load_levels():
    if os.path.exists(LEVELS_FILE):
        with open(LEVELS_FILE, 'r') as f:
            try:
                content = f.read()
                return json.loads(content) if content else {}
            except json.JSONDecodeError:
                return {}
    return {}

def save_levels(levels_data):
    with open(LEVELS_FILE, 'w') as f:
        json.dump(levels_data, f, indent=4)

def get_level_info(xp):
    level = 0
    xp_required = 100
    current_xp = xp
    while current_xp >= xp_required:
        level += 1
        current_xp -= xp_required
        xp_required = 5 * (level ** 2) + (50 * level) + 100 
    xp_next_level = 5 * (level ** 2) + (50 * level) + 100
    xp_current_level = current_xp
    return level, xp_current_level, xp_next_level

# -------------------------------------------------------------
# 2. CODE BOT DISCORD (INTENTS V√Ä C√ÅC H√ÄM X·ª¨ L√ù)
# -------------------------------------------------------------

# C·∫•u h√¨nh Discord Intents
intents = discord.Intents.default()
intents.members = True 
intents.message_content = True 
bot = commands.Bot(command_prefix='!', intents=intents) 
levels = {} 

# --- C·∫§U H√åNH GEMINI AI ---
try:
    gemini_client = genai.Client(api_key=GEMINI_API_KEY)
except Exception as e:
    print(f"L·ªñI C·∫§U H√åNH GEMINI: Kh√¥ng th·ªÉ kh·ªüi t·∫°o client. L·ªói: {e}")
    gemini_client = None


def process_custom_placeholders(message: str, member: discord.Member) -> str:
    """Thay th·∫ø c√°c placeholders t√πy ch·ªânh b·∫±ng c√∫ ph√°p Discord th·ª±c t·∫ø."""
    guild = member.guild
    message = message.replace("{mem}", member.mention)
    message = message.replace("{sever}", guild.name)
    member_count = guild.member_count if guild.member_count is not None else len(guild.members)
    message = message.replace("{soluong}", str(member_count))

    def replace_id(match):
        target_id = match.group(1)
        return f"<@{target_id}>" 

    message = re.sub(r'\{id(\d+)\}', replace_id, message)
    return message

# --- EVENTS V√Ä L·ªÜNH C∆† B·∫¢N ---

@bot.event
async def on_ready():
    global levels, config
    levels = load_levels() 
    config = load_config()
    print(f'ü§ñ Bot ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n: {bot.user}')
    await bot.change_presence(activity=discord.Game(name="Qu·∫£n l√Ω b·ªüi Web Dashboard"))
    
    # --- ƒê·ªíNG B·ªò H√ìA L·ªÜNH APP COMMANDS ---
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ ƒê√£ ƒë·ªìng b·ªô h√≥a {len(synced)} l·ªánh Context/Slash.")
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªìng b·ªô h√≥a l·ªánh: {e}")
        
@bot.event
async def on_member_join(member):
    """G·ª≠i L·ªùi Ch√†o b·∫±ng Embed."""
    channel_id_str = config.get("ID_KENH_CHAO_MUNG", "")
    try:
        channel_id = int(channel_id_str)
    except ValueError:
        print("L·ªñI C·∫§U H√åNH: ID K√™nh ch√†o m·ª´ng kh√¥ng h·ª£p l·ªá.")
        return

    CAU_CHAO_HIEN_TAI = config.get("CAU_CHAO_HIEN_TAI", "")
    EMBED_MAU_HEX = config.get("EMBED_CHAO_MUNG_MAU", "#3498db").replace("#", "0x")
    URL_GIF_MAIN = config.get("URL_GIF_MAIN", "")
    
    channel = bot.get_channel(channel_id)
    
    if channel and CAU_CHAO_HIEN_TAI:
        processed_message = process_custom_placeholders(CAU_CHAO_HIEN_TAI, member)
        
        try:
            embed_color = int(EMBED_MAU_HEX, 16)
        except ValueError:
            embed_color = 0x3498db 

        embed = discord.Embed(
            title=f"üéâ CH√ÄO M·ª™NG {member.name.upper()} ƒê·∫æN V·ªöI SERVER!",
            description=processed_message,
            color=embed_color
        )
        
        embed.set_thumbnail(url=member.display_avatar.url)
        embed.set_footer(text=f"Server hi·ªán c√≥: {member.guild.member_count} th√†nh vi√™n")
        
        if URL_GIF_MAIN:
            embed.set_image(url=URL_GIF_MAIN)
        
        await channel.send(content=member.mention, embed=embed)

@bot.event
async def on_message(message):
    """X·ª≠ l√Ω AI khi ping, Tr·∫£ l·ªùi t·ª± ƒë·ªông, c·∫•p XP v√† Level."""
    global levels, config
    
    if message.author.bot or not message.guild:
        await bot.process_commands(message)
        return
        
    # ------------------------------------------------
    # A. X·ª¨ L√ù AI KHI C√ì PING (@Banhbaochao)
    # ------------------------------------------------
    if bot.user.mentioned_in(message) and gemini_client:
        # L·∫•y n·ªôi dung tin nh·∫Øn sau khi ƒë√£ lo·∫°i b·ªè ping Bot
        cleaned_text = re.sub(r'<@!?\d+>', '', message.content).strip()
        
        if cleaned_text:
            await message.channel.typing() # B√°o Bot ƒëang g√µ
            
            # --- ƒê·ªäNH NGHƒ®A T√çNH C√ÅCH S·∫ÆC S·∫¢O V√Ä S√ÅT TH∆Ø∆†NG ---
            system_instruction = (
                "B·∫°n l√† 'Banhbaochao Bot', m·ªôt tr·ª£ l√Ω AI th√¥ng minh, s√°ng t·∫°o. "
                "Tuy nhi√™n, b·∫°n c√≥ t√≠nh c√°ch h∆°i s·∫Øc s·∫£o, th√≠ch ch√¢m bi·∫øm nh·∫π nh√†ng, "
                "v√† ƒë√¥i khi ƒë∆∞a ra nh·ªØng c√¢u tr·∫£ l·ªùi c√≥ t√≠nh 's√°t th∆∞∆°ng' cao nh∆∞ng v·∫´n ch√≠nh x√°c. "
                "H√£y gi·ªØ gi·ªçng ƒëi·ªáu l·∫°nh l√πng v√† h∆°i ki√™u ng·∫°o."
            )

            try:
                # G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini 
                response = gemini_client.models.generate_content(
                    model='gemini-2.5-flash',
                    contents=cleaned_text,
                    config=genai.types.GenerateContentConfig(
                        system_instruction=system_instruction
                    )
                )
                
                ai_reply = response.text
                
                await message.reply(ai_reply, mention_author=False)
                
                # Kh√¥ng c·∫•p XP/t·ª± ƒë·ªông tr·∫£ l·ªùi khi ƒë√£ k√≠ch ho·∫°t AI
                await bot.process_commands(message)
                return

            except Exception as e:
                # Ph·∫£n h·ªìi n·∫øu l·ªói API
                error_msg = f"Ng∆∞∆°i g·ªçi ta l√†m g√¨? L·ªói k·∫øt n·ªëi v·ªõi thi√™n h√† Gemini ({e})."
                await message.reply(error_msg, mention_author=False)
                
    # ------------------------------------------------
    # B. X·ª¨ L√ù TR·∫¢ L·ªúI T·ª∞ ƒê·ªòNG
    # ------------------------------------------------
    content = message.content.lower().strip()
    auto_responses = config.get("AUTO_RESPONSES", [])
    
    for auto_reply in auto_responses:
        trigger = auto_reply.get("trigger", "").lower().strip()
        response_template = auto_reply.get("response", "")
        
        if trigger:
            if content == trigger or re.search(r'\b' + re.escape(trigger) + r'\b', content):
                processed_response = process_custom_placeholders(response_template, message.author)
                await message.channel.send(processed_response)
                await bot.process_commands(message)
                return 

    # ------------------------------------------------
    # C. X·ª¨ L√ù LEVEL V√Ä XP
    # ------------------------------------------------
    user_id = str(message.author.id)
    if user_id not in levels:
        levels[user_id] = {'xp': 0, 'level': 0, 'last_message': 0}

    # Gi·ªõi h·∫°n XP m·ªói 60 gi√¢y
    if message.created_at.timestamp() - levels[user_id]['last_message'] >= 60:
        
        old_xp = levels[user_id]['xp']
        levels[user_id]['xp'] += random.randint(10, 25)
        levels[user_id]['last_message'] = message.created_at.timestamp()
        
        old_level, _, _ = get_level_info(old_xp)
        new_level, _, _ = get_level_info(levels[user_id]['xp'])
        levels[user_id]['level'] = new_level
        
        if new_level > old_level:
            await message.channel.send(f"Ch√∫c m·ª´ng {message.author.mention} ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô **{new_level}**! üéâ")
            
            LEVEL_REWARDS = config.get("LEVEL_REWARDS", {})
            new_level_str = str(new_level) 
            
            if new_level_str in LEVEL_REWARDS:
                try:
                    role_id_to_assign = int(LEVEL_REWARDS[new_level_str])
                except ValueError:
                    role_id_to_assign = None
                    
                if role_id_to_assign:
                    role_to_assign = message.guild.get_role(role_id_to_assign)
                    
                    if role_to_assign and message.guild.me.top_role.position > role_to_assign.position:
                        try:
                            if role_to_assign not in message.author.roles:
                                await message.author.add_roles(role_to_assign)
                                await message.channel.send(f"V√† b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫∑ng Role **{role_to_assign.name}**! Ch√∫c m·ª´ng! üèÖ")
                        except discord.Forbidden:
                            print(f"L·ªói: Bot kh√¥ng c√≥ quy·ªÅn g√°n Role {role_to_assign.name}.")

        save_levels(levels) 

    # X·ª≠ l√Ω c√°c l·ªánh prefix kh√°c (n·∫øu c√≥)
    await bot.process_commands(message)

# ----------------------------------------------------------------------------------
# L·ªÜNH APP COMMANDS (SLASH & CONTEXT MENU)
# ----------------------------------------------------------------------------------

# --- L·ªánh Slash: /rank ---
@bot.tree.command(name='rank', description='Ki·ªÉm tra c·∫•p ƒë·ªô v√† XP hi·ªán t·∫°i c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi kh√°c.')
async def slash_rank(interaction: discord.Interaction, member: discord.Member = None):
    """Hi·ªÉn th·ªã c·∫•p ƒë·ªô, XP v√† ti·∫øn tr√¨nh l√™n c·∫•p."""
    
    target_member = member or interaction.user
    user_id = str(target_member.id)
    global levels
    
    if user_id not in levels or levels[user_id]['xp'] == 0:
        msg = f"üòî Ng∆∞·ªùi d√πng **{target_member.display_name}** ch∆∞a c√≥ XP. H√£y nh·∫Øn tin ƒë·ªÉ b·∫Øt ƒë·∫ßu t√≠ch l≈©y!" if target_member == interaction.user else f"üòî Ng∆∞·ªùi d√πng **{target_member.display_name}** ch∆∞a c√≥ XP."
        await interaction.response.send_message(msg, ephemeral=True)
        return

    xp = levels[user_id]['xp']
    level, xp_current_level, xp_next_level = get_level_info(xp)
    
    progress_percent = (xp_current_level / xp_next_level) * 100 if xp_next_level > 0 else 100
    
    BAR_LENGTH = 15
    fill_char = '‚ñà'
    empty_char = '‚Äî'
    num_filled = int(progress_percent / (100 / BAR_LENGTH))
    progress_bar = fill_char * num_filled + empty_char * (BAR_LENGTH - num_filled)
    
    embed = discord.Embed(
        title=f"üéñÔ∏è X·∫øp H·∫°ng c·ªßa {target_member.display_name}",
        color=0x00bcd4
    )
    
    embed.add_field(name="C·∫•p ƒê·ªô (Level)", value=f"**{level}**", inline=True)
    embed.add_field(name="T·ªïng XP", value=f"**{xp:,}** XP", inline=True)
    embed.add_field(name="Ti·∫øn Tr√¨nh", 
                    value=f"`{progress_bar}` **{progress_percent:.0f}%**\n*{xp_current_level:,}/{xp_next_level:,} XP c·∫ßn ƒë·ªÉ l√™n Level {level + 1}*", 
                    inline=False)
    
    embed.set_thumbnail(url=target_member.display_avatar.url)
    embed.set_footer(text="G√µ /rank ƒë·ªÉ ki·ªÉm tra c·∫•p ƒë·ªô c·ªßa b·∫°n!")
    
    await interaction.response.send_message(embed=embed)


# --- L·ªánh Slash: /resetxp ---
@bot.tree.command(name='resetxp', description='X√≥a XP v√† Level c·ªßa m·ªôt ng∆∞·ªùi d√πng. (Ch·ªâ Admin)')
@app_commands.checks.has_permissions(administrator=True)
async def slash_reset_xp(interaction: discord.Interaction, member: discord.Member):
    """X√≥a XP v√† Level c·ªßa m·ªôt ng∆∞·ªùi d√πng."""
    
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n tr·ªã ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.", ephemeral=True)
        return

    user_id = str(member.id)
    global levels
    
    if user_id in levels:
        levels[user_id] = {'xp': 0, 'level': 0, 'last_message': 0}
        save_levels(levels)
        
        await interaction.response.send_message(
            f"‚úÖ ƒê√£ reset XP v√† Level c·ªßa **{member.mention}** v·ªÅ 0.",
            ephemeral=False
        )
    else:
        await interaction.response.send_message(
            f"‚ùå Ng∆∞·ªùi d√πng **{member.mention}** ch∆∞a c√≥ d·ªØ li·ªáu Level.",
            ephemeral=True
        )


# --- L·ªánh Context Menu (Gi·ªØ nguy√™n) ---

@bot.tree.context_menu(name='Slap (T√°t)')
async def slap_member(interaction: discord.Interaction, member: discord.Member):
    if member == interaction.user:
        await interaction.response.send_message(f"B·∫°n t·ª± t√°t ch√≠nh m√¨nh √†? üòÖ", ephemeral=True)
        return

    gif_url = random.choice([
        "https://tenor.com/view/slap-anime-gif-5374974", 
        "https://tenor.com/view/slap-hand-hit-slapping-slapped-gif-17032909"
    ])

    embed = discord.Embed(
        description=f"üí• **{interaction.user.display_name}** v·ª´a t√°t **{member.display_name}** m·ªôt c√°i tr·ªùi gi√°ng!",
        color=0xf04747
    )
    embed.set_image(url=gif_url)

    await interaction.response.send_message(embed=embed)


@bot.tree.context_menu(name='Hug (√îm)')
async def hug_member(interaction: discord.Interaction, member: discord.Member):
    if member == interaction.user:
        await interaction.response.send_message(f"B·∫°n t·ª± √¥m m√¨nh ∆∞? T·ªôi nghi·ªáp qu√° ü•∫", ephemeral=True)
        return
        
    gif_url = random.choice([
        "https://tenor.com/view/cuddle-hug-love-in-love-happy-gif-14666579", 
        "https://tenor.com/view/mochi-peach-cat-hug-love-pat-gif-17417534"
    ])

    embed = discord.Embed(
        description=f"üíñ **{interaction.user.display_name}** v·ª´a t·∫∑ng **{member.display_name}** m·ªôt c√°i √¥m th·∫≠t ch·∫∑t!",
        color=0x57f287
    )
    embed.set_image(url=gif_url)
    
    await interaction.response.send_message(embed=embed)


@bot.tree.context_menu(name='Pat (Xoa ƒë·∫ßu)')
async def pat_member(interaction: discord.Interaction, member: discord.Member):
    gif_url = random.choice([
        "https://tenor.com/view/anime-pat-head-gif-17070183", 
        "https://tenor.com/view/anime-pat-head-k-on-gif-10255532"
    ])

    embed = discord.Embed(
        description=f"üëã **{interaction.user.display_name}** xoa ƒë·∫ßu **{member.display_name}** ƒë·∫ßy tr√¨u m·∫øn.",
        color=0xfee75c
    )
    embed.set_image(url=gif_url)
    
    await interaction.response.send_message(embed=embed)

# -------------------------------------------------------------
# 3. CODE WEB DASHBOARD B·∫∞NG FLASK 
# -------------------------------------------------------------

# Kh·ªüi t·∫°o Flask v√† khai b√°o th∆∞ m·ª•c static
app = Flask(__name__, static_folder='static')
app.secret_key = SECRET_KEY 

def generate_level_dashboard_html(active_tab):
    """T·∫°o n·ªôi dung cho c√°c tab Level, Auto-Reply."""
    levels_data = load_levels()
    leaderboard = []
    is_bot_ready = bot.is_ready() 
    LEVEL_REWARDS = config.get("LEVEL_REWARDS", {})
    AUTO_RESPONSES = config.get("AUTO_RESPONSES", [])

    guild = bot.guilds[0] if bot.guilds and is_bot_ready else None 

    # --- STYLE CHUNG CHO C√ÅC TAB ---
    style_common = """
        <style>
            .config-note { background-color: rgba(255, 255, 255, 0.1); padding: 15px; border-radius: 8px; margin-bottom: 20px; }
            .reward-row { display: flex; align-items: center; margin-bottom: 10px; }
            .reward-row input { width: 100px; margin-right: 10px; }
            .reward-row input[type="text"] { width: 250px; }
            .reward-row span { color: #00bcd4; font-weight: bold; }
            #add_reward, #add_auto_reply { background-color: #f39c12; margin-top: 20px; }
            #add_reward:hover, #add_auto_reply:hover { background-color: #e67e22; }
            .reply-row textarea { height: 80px; resize: vertical; margin-bottom: 5px; width: calc(90% - 2px);}
            .ready-status { background-color: #e74c3c; color: white; padding: 10px; border-radius: 5px; text-align: center; font-weight: bold; margin-bottom: 20px; }
            .locked-field { background-color: #444; color: #aaa; cursor: not-allowed; }
        </style>
    """
    
    ready_status = ""
    if not is_bot_ready or not guild:
         ready_status = "<div class='ready-status'>‚ö†Ô∏è **C·∫¢NH B√ÅO:** Bot Discord ch∆∞a ho√†n t·∫•t k·∫øt n·ªëi ho·∫∑c kh√¥ng t√¨m th·∫•y Server. D·ªØ li·ªáu (t√™n Role, t√™n User) c√≥ th·ªÉ b·ªã thi·∫øu ho·∫∑c l·ªói 'L·ªói m√°y ch·ªß n·ªôi b·ªô' c√≥ th·ªÉ x·∫£y ra. Vui l√≤ng ch·ªù Bot b√°o Ready.</div>"

    if active_tab == 'level_config':
        # --- Tab c·∫•u h√¨nh Role th∆∞·ªüng ---
        reward_rows = ""
        sorted_rewards = sorted(LEVEL_REWARDS.items(), key=lambda x: int(x[0]) if x[0].isdigit() else 0)
        
        for level, role_id in sorted_rewards:
            role_name = ""
            if guild: 
                try:
                    role = guild.get_role(int(role_id)) if role_id.isdigit() else None
                    role_name = role.name if role else f"ID: {role_id} (Kh√¥ng t√¨m th·∫•y)"
                except ValueError:
                    role_name = f"ID: {role_id} (ID L·ªói)"
            else:
                role_name = f"ID: {role_id} (Bot ƒëang t·∫£i...)"


            reward_rows += f"""
            <div class="reward-row">
                <input type="number" name="level[]" value="{level}" min="1" required>
                <input type="text" name="role_id[]" value="{role_id}" required>
                <span>{role_name}</span>
            </div>
            """
        
        return style_common + ready_status + f"""
        <div class="config-note">
            Nh·∫≠p Level v√† ID c·ªßa Role t∆∞∆°ng ·ª©ng. ID Role ph·∫£i l√† s·ªë nguy√™n (Copy ID t·ª´ Discord).
        </div>
        <form method="POST" action="{url_for('dashboard')}?tab=level_config">
            <label>Level Th∆∞·ªüng Role:</label>
            <div id="rewards_container">
                {reward_rows}
            </div>
            <button type="button" id="add_reward" onclick="addRewardRow()">+ Th√™m Level Th∆∞·ªüng</button>
            <button type="submit" style="margin-top: 15px;">L∆∞u C·∫•u H√¨nh Level Th∆∞·ªüng</button>
        </form>

        <script>
            function addRewardRow() {{
                const container = document.getElementById('rewards_container');
                const newRow = document.createElement('div');
                newRow.className = 'reward-row';
                newRow.innerHTML = `
                    <input type="number" name="level[]" placeholder="Level m·ªõi" min="1" required>
                    <input type="text" name="role_id[]" placeholder="ID Role (v√≠ d·ª•: 123456789...)" required>
                    <span>(Ch∆∞a l∆∞u)</span>
                `;
                container.appendChild(newRow);
            }}
        </script>
        """
        
    elif active_tab == 'auto_reply_config':
        # --- Tab C·∫•u h√¨nh Tr·∫£ L·ªùi T·ª± ƒê·ªông ---
        reply_rows = ""
        for i, reply in enumerate(AUTO_RESPONSES):
            trigger = reply.get("trigger", "")
            response = reply.get("response", "")
            reply_rows += f"""
            <div class="reply-row" data-index="{i}" style="margin-bottom: 15px; border: 1px solid #555; padding: 10px; border-radius: 8px;">
                <label>T·ª´ kh√≥a (Trigger):</label>
                <input type="text" name="trigger[]" value="{trigger}" placeholder="V√≠ d·ª•: hi, help, link" style="width: 90%; margin-bottom: 5px;" required>
                <label>Tin nh·∫Øn Bot tr·∫£ l·ªùi (Response):</label>
                <textarea name="response[]" placeholder="V√≠ d·ª•: Ch√†o {{mem}}!">{response}</textarea>
                <button type="button" onclick="removeReplyRow(this)" style="width: auto; background-color: #e74c3c; padding: 5px 10px; font-size: 0.9em; margin-top: 5px;">X√≥a</button>
            </div>
            """
        
        return style_common + ready_status + f"""
        <div class="config-note">
            Bot s·∫Ω tr·∫£ l·ªùi n·∫øu tin nh·∫Øn **ch·ª©a ch√≠nh x√°c t·ª´ kh√≥a** (trigger).
            S·ª≠ d·ª•ng placeholders: <code>{{mem}}</code>, <code>{{sever}}</code>, <code>{{soluong}}</code>, v.v.
        </div>
        <form method="POST" action="{url_for('dashboard')}?tab=auto_reply_config">
            <div id="auto_replies_container">
                {reply_rows}
            </div>
            <button type="button" id="add_auto_reply" onclick="addAutoReplyRow()">+ Th√™m Tr·∫£ L·ªùi T·ª± ƒê·ªông</button>
            <button type="submit" style="margin-top: 15px;">L∆∞u C·∫•u H√¨nh Tr·∫£ L·ªùi T·ª± ƒê·ªông</button>
        </form>
        
        <script>
            function addAutoReplyRow() {{
                const container = document.getElementById('auto_replies_container');
                const newRow = document.createElement('div');
                newRow.className = 'reply-row';
                newRow.style.cssText = "margin-bottom: 15px; border: 1px solid #555; padding: 10px; border-radius: 8px;";
                newRow.innerHTML = `
                    <label>T·ª´ kh√≥a (Trigger):</label>
                    <input type="text" name="trigger[]" placeholder="V√≠ d·ª•: hi, help" style="width: 90%; margin-bottom: 5px;" required>
                    <label>Tin nh·∫Øn Bot tr·∫£ l·ªùi (Response):</label>
                    <textarea name="response[]" placeholder="V√≠ d·ª•: Ch√†o {{mem}}!" style="height: 80px; resize: vertical; margin-bottom: 5px; width: calc(90% - 2px);"></textarea>
                    <button type="button" onclick="removeReplyRow(this)" style="width: auto; background-color: #e74c3c; padding: 5px 10px; font-size: 0.9em; margin-top: 5px;">X√≥a</button>
                `;
                container.appendChild(newRow);
            }}
            function removeReplyRow(button) {{
                button.closest('.reply-row').remove();
            }}
        </script>
        """
        
    elif active_tab == 'level_leaderboard':
        # --- Tab B·∫£ng x·∫øp h·∫°ng ---
        
        for user_id, data in levels_data.items():
            if 'xp' not in data: continue
            
            member = bot.get_user(int(user_id)) if is_bot_ready else None
            if member: username = member.global_name or member.name 
            elif is_bot_ready: username = f"Ng∆∞·ªùi d√πng c≈© (ID: {user_id})"
            else: username = f"ƒêang t·∫£i... (ID: {user_id})" 
            
            level, xp_current_level, xp_next_level = get_level_info(data['xp'])
            leaderboard.append({'name': username, 'level': level, 'xp': data['xp'], 'xp_current_level': xp_current_level, 'xp_next_level': xp_next_level})

        leaderboard.sort(key=lambda x: (x['level'], x['xp']), reverse=True)

        table_rows = ""
        if not leaderboard:
            table_rows = "<tr><td colspan='5' style='text-align: center;'>Ch∆∞a c√≥ d·ªØ li·ªáu. Vui l√≤ng nh·∫Øn tin trong Discord ƒë·ªÉ b·∫Øt ƒë·∫ßu t√≠ch l≈©y XP.</td></tr>"
        else:
            for rank, entry in enumerate(leaderboard, 1):
                progress_percent = (entry['xp_current_level'] / entry['xp_next_level']) * 100 if entry['xp_next_level'] > 0 else 100
                reward_info = " ‚≠ê" if str(entry['level']) in LEVEL_REWARDS else ""
                
                table_rows += f"""
                <tr>
                    <td>{rank}</td>
                    <td>{entry['name']}</td>
                    <td>{entry['level']}{reward_info}</td>
                    <td>{entry['xp']:,} XP</td>
                    <td>
                        <div class="progress-bar">
                            <div style="width: {progress_percent:.0f}%;">{progress_percent:.0f}%</div>
                        </div>
                        <small>{entry['xp_current_level']:,}/{entry['xp_next_level']:,} XP</small>
                    </td>
                </tr>
                """
        
        return style_common + ready_status + f"""
        <style>
        .level-table {{ width: 100%; border-collapse: collapse; margin-top: 15px; background-color: rgba(255, 255, 255, 0.1); border-radius: 8px; overflow: hidden; }}
        .level-table th, .level-table td {{ padding: 12px; text-align: left; border-bottom: 1px solid rgba(255, 255, 255, 0.1); }}
        .level-table th {{ background-color: rgba(255, 255, 255, 0.2); font-weight: bold; color: #fff; }}
        .level-table tr:hover {{ background-color: rgba(255, 255, 255, 0.05); }}
        .progress-bar {{ height: 20px; background-color: #444; border-radius: 10px; overflow: hidden; }}
        .progress-bar div {{ height: 100%; background-color: #00bcd4; text-align: center; color: white; line-height: 20px; font-weight: bold; font-size: 0.8em; transition: width 0.5s; }}
        </style>
        <div class="level-container">
            <h3>B·∫£ng X·∫øp H·∫°ng C·∫•p ƒê·ªô (Server Leaders)</h3>
            <table class="level-table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>T√™n Ng∆∞·ªùi D√πng</th>
                        <th>C·∫•p ƒê·ªô</th>
                        <th>T·ªïng XP</th>
                        <th>Ti·∫øn Tr√¨nh</th>
                    </tr>
                </thead>
                <tbody>
                    {table_rows}
                </tbody>
            </table>
            <div class="note" style="margin-top: 20px; color: #fff;">
                ‚≠ê C√°c c·∫•p ƒë·ªô c√≥ g·∫Øn d·∫•u sao l√† c·∫•p ƒë·ªô th∆∞·ªüng (Level Reward).
            </div>
        </div>
        """
    return ""

@app.route('/', methods=['GET', 'POST'])
def dashboard():
    global config
    
    active_tab = request.args.get('tab', 'chao_mung') 
    thong_bao = ""
    
    if request.method == 'POST':
        if active_tab == 'chao_mung':
            # X·ª≠ l√Ω tab L·ªùi Ch√†o
            noi_dung_moi = request.form.get('loi_chao_moi')
            if noi_dung_moi:
                config["CAU_CHAO_HIEN_TAI"] = noi_dung_moi
                config["URL_GIF_MAIN"] = request.form.get('url_gif_main', default="")
                config["EMBED_CHAO_MUNG_MAU"] = request.form.get('embed_mau_hex', default="#3498db")
                config["ID_KENH_CHAO_MUNG"] = request.form.get('id_kenh_chao_mung', default="")
                
                # B·ªè qua gi√° tr·ªã dashboard_bg_url t·ª´ form (ƒë√£ b·ªã kh√≥a)
                
                save_config(config)
                thong_bao = "‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh L·ªùi Ch√†o th√†nh c√¥ng! (·∫¢nh n·ªÅn Dashboard ƒë√£ ƒë∆∞·ª£c kh√≥a)."
            else:
                thong_bao = "‚ùå L·ªùi ch√†o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!"
                
        elif active_tab == 'level_config':
            # X·ª≠ l√Ω tab C·∫•u H√¨nh Level Th∆∞·ªüng
            levels_input = request.form.getlist('level[]')
            role_ids_input = request.form.getlist('role_id[]')
            
            new_rewards = {}
            valid_config = True
            
            for level, role_id in zip(levels_input, role_ids_input):
                level = level.strip()
                role_id = role_id.strip()
                
                if not level.isdigit() or not role_id.isdigit():
                    valid_config = False
                    thong_bao = "‚ùå Level v√† Role ID ph·∫£i l√† s·ªë nguy√™n h·ª£p l·ªá!"
                    break
                    
                new_rewards[level] = role_id
            
            if valid_config:
                config["LEVEL_REWARDS"] = new_rewards
                save_config(config)
                thong_bao = "‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh Level Th∆∞·ªüng th√†nh c√¥ng!"
            
            return redirect(url_for('dashboard', tab='level_config'))
            
        elif active_tab == 'auto_reply_config':
            # X·ª≠ l√Ω tab Tr·∫£ L·ªùi T·ª± ƒê·ªông
            triggers_input = request.form.getlist('trigger[]')
            responses_input = request.form.getlist('response[]')
            
            new_auto_responses = []
            valid_config = True
            
            for trigger, response in zip(triggers_input, responses_input):
                if trigger.strip() and response.strip():
                    new_auto_responses.append({"trigger": trigger.strip(), "response": response.strip()})
                else:
                    valid_config = False
                    thong_bao = "‚ùå T·ª´ kh√≥a v√† Tin nh·∫Øn tr·∫£ l·ªùi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!"
                    break
            
            if valid_config:
                config["AUTO_RESPONSES"] = new_auto_responses
                save_config(config)
                thong_bao = "‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh Tr·∫£ L·ªùi T·ª± ƒê·ªông th√†nh c√¥ng!"
            
            return redirect(url_for('dashboard', tab='auto_reply_config'))

    # L·∫•y d·ªØ li·ªáu config cho template
    CAU_CHAO_HIEN_TAI = config.get("CAU_CHAO_HIEN_TAI", "")
    URL_GIF_MAIN = config.get("URL_GIF_MAIN", "")
    EMBED_MAU_HEX = config.get("EMBED_CHAO_MUNG_MAU", "#3498db")
    ID_KENH_CHAO_MUNG = config.get("ID_KENH_CHAO_MUNG", "")
    DASHBOARD_BACKGROUND_URL = config.get("DASHBOARD_BACKGROUND_URL", DEFAULT_BACKGROUND_URL) # Lu√¥n l·∫•y gi√° tr·ªã ƒë√£ kh√≥a

    
    # T·∫°o n·ªôi dung Tab
    if active_tab == 'chao_mung':
        tab_content = f"""
            <form method="POST" action="{url_for('dashboard')}?tab=chao_mung">
                <div class="input-group">
                    <label for="id_kenh_chao_mung">ID K√™nh Ch√†o M·ª´ng:</label>
                    <input type="text" id="id_kenh_chao_mung" name="id_kenh_chao_mung" value="{ID_KENH_CHAO_MUNG}" placeholder="ID k√™nh (v√≠ d·ª•: 123456789...)">
                    <div class="note">
                        Bot s·∫Ω g·ª≠i l·ªùi ch√†o v√†o k√™nh c√≥ ID n√†y.
                    </div>
                </div>
                <div class="input-group">
                    <label for="loi_chao_moi">N·ªôi dung L·ªùi Ch√†o (s·∫Ω l√† M√¥ t·∫£ Embed):</label>
                    <textarea id="loi_chao_moi" name="loi_chao_moi">{CAU_CHAO_HIEN_TAI}</textarea>
                    <div class="note">
                        S·ª≠ d·ª•ng Placeholders: <code>{{mem}}</code>, <code>{{sever}}</code>, <code>{{soluong}}</code>, <code>{{id[ID]}}</code>.
                    </div>
                </div>

                <div class="input-group">
                    <label for="embed_mau_hex">M√†u Vi·ªÅn Embed (M√£ HEX):</label>
                    <input type="text" id="embed_mau_hex" name="embed_mau_hex" value="{EMBED_MAU_HEX}" placeholder="#3498db">
                </div>

                <div class="input-group">
                    <label for="url_gif_main">URL ·∫¢nh L·ªõn (Image/GIF cho Embed):</label>
                    <input type="text" id="url_gif_main" name="url_gif_main" value="{URL_GIF_MAIN}" placeholder="S·∫Ω d√πng l√†m ·∫£nh ch√≠nh trong Embed">
                </div>
                
                <hr style="border: 1px solid #555; margin: 30px 0;">

                <div class="input-group">
                    <label for="dashboard_bg_url">T√™n/URL ·∫¢nh/GIF N·ªÅn Dashboard (ƒê√£ kh√≥a):</label>
                    <input type="text" id="dashboard_bg_url" name="dashboard_bg_url" value="{DASHBOARD_BACKGROUND_URL}" class="locked-field" readonly>
                    <div class="note">
                        ·∫¢nh n·ªÅn ƒë√£ ƒë∆∞·ª£c c·ªë ƒë·ªãnh l√† room.giftrong th∆∞ m·ª•cnstatic/ .
                    </div>
                </div>

                <button type="submit">L∆∞u C·∫•u H√¨nh L·ªùi Ch√†o</button>
            </form>
        """
    elif active_tab == 'level_leaderboard':
        tab_content = generate_level_dashboard_html('level_leaderboard')
    elif active_tab == 'level_config':
        tab_content = generate_level_dashboard_html('level_config')
    elif active_tab == 'auto_reply_config':
        tab_content = generate_level_dashboard_html('auto_reply_config')

    # T·∫°o URL ·∫£nh n·ªÅn b·∫±ng url_for('static', filename='...')
    background_url_for_css = url_for('static', filename=DASHBOARD_BACKGROUND_URL)


    # Template HTML & CSS ch√≠nh
    html_template = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Banhbaochao Qu·∫£n l√Ω</title>
        <style>
            /* CSS Giao di·ªán Chung */
            body {{ 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                margin: 0; 
                padding: 0; 
                color: #f0f0f0; 
                display: flex; 
                justify-content: center; 
                align-items: flex-start; 
                min-height: 100vh; 
                padding-top: 50px;
                padding-bottom: 50px;
                background-color: #2f3136;
                background-image: url('{background_url_for_css}');
                background-attachment: fixed;
                background-position: center;
                background-repeat: no-repeat;
                background-size: cover; 
            }}
            .container {{
                max-width: 900px; 
                width: 90%; 
                background-color: rgba(0, 0, 0, 0.8); 
                border-radius: 12px; 
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.8); 
                backdrop-filter: blur(5px); 
                border: 1px solid rgba(255, 255, 255, 0.1);
                padding: 0; 
            }}
            h2 {{ 
                text-align: center; 
                color: #e0e0e0; 
                margin: 20px 0; 
                font-size: 2.2em; 
                text-shadow: 2px 2px 4px rgba(0,0,0,0.6);
            }}
            .alert {{ 
                padding: 12px; 
                margin: 20px; 
                border-radius: 8px; 
                font-weight: bold; 
                text-align: center;
                background-color: #5cb85c; 
                color: white; 
                border: 1px solid #4cae4c; 
            }}
            
            /* CSS Tabs */
            .tabs {{
                display: flex;
                border-bottom: 2px solid rgba(255, 255, 255, 0.2);
                padding-left: 10px;
                flex-wrap: wrap;
            }}
            .tab-button {{
                padding: 10px 15px;
                cursor: pointer;
                background-color: transparent;
                border: none;
                color: #aaa;
                font-size: 1.0em;
                font-weight: bold;
                transition: color 0.3s, background-color 0.3s;
                margin-bottom: -2px; 
            }}
            .tab-button.active {{
                color: #00bcd4;
                border-bottom: 2px solid #00bcd4;
                background-color: rgba(255, 255, 255, 0.05);
            }}
            .tab-content {{
                padding: 30px;
            }}
            
            /* CSS Input/Form */
            form {{ padding: 0; }}
            label {{ display: block; margin-bottom: 5px; font-weight: bold; color: #c0c0c0; }}
            input[type="text"], input[type="number"], textarea {{ 
                padding: 12px; 
                box-sizing: border-box; 
                border: 1px solid #555; 
                border-radius: 8px; 
                background-color: #333; 
                color: #eee; 
                font-size: 1.1em;
            }}
            input[type="text"], textarea {{ width: calc(100% - 2px); margin-bottom: 15px; }}
            textarea {{ height: 180px; resize: vertical; }}
            button {{ 
                display: block; 
                width: 100%;
                padding: 15px 20px; 
                background-color: #5cb85c; 
                color: white; 
                border: none; 
                border-radius: 8px; 
                cursor: pointer; 
                font-size: 1.2em;
                font-weight: bold;
                transition: background-color 0.3s, transform 0.2s;
            }}
            button:hover {{ 
                background-color: #4cae4c; 
                transform: translateY(-2px); 
            }}
            .note {{ color: #b0b0b0; font-size: 0.95em; margin-top: 15px; line-height: 1.5; }}
            .input-group {{ margin-bottom: 15px; }}
        </style>
        <script>
            function changeTab(tabName) {{
                window.location.href = '?tab=' + tabName;
            }}
        </script>
    </head>
    <body>
        <div class="container">
            <h2>‚öôÔ∏è Qu·∫£n L√Ω Discord Bot ‚òï</h2>
            
            <div class="tabs">
                <button class="tab-button {'active' if active_tab == 'chao_mung' else ''}" onclick="changeTab('chao_mung')">L·ªùi Ch√†o & Background</button>
                <button class="tab-button {'active' if active_tab == 'level_leaderboard' else ''}" onclick="changeTab('level_leaderboard')">B·∫£ng X·∫øp H·∫°ng</button>
                <button class="tab-button {'active' if active_tab == 'level_config' else ''}" onclick="changeTab('level_config')">C·∫•u H√¨nh Level</button>
                <button class="tab-button {'active' if active_tab == 'auto_reply_config' else ''}" onclick="changeTab('auto_reply_config')">T·ª± ƒê·ªông Tr·∫£ L·ªùi</button>
            </div>
            
            <div class="tab-content">
                {'<div class="alert success">' + thong_bao + '</div>' if thong_bao else ''}
                {tab_content}
            </div>
        </div>
    </body>
    </html>
    """
    return render_template_string(html_template, url_for=url_for) 

def run_flask():
    app.run(host='0.0.0.0', port=5000, use_reloader=False)

# -------------------------------------------------------------
# 4. KH·ªûI CH·∫†Y C·∫¢ HAI
# -------------------------------------------------------------

if __name__ == '__main__':
    # Ki·ªÉm tra v√† c√†i ƒë·∫∑t th∆∞ vi·ªán GenAI (n·∫øu thi·∫øu)
    try:
        import google.genai
    except ImportError:
        print("\n!!! L·ªñI QUAN TR·ªåNG: Th∆∞ vi·ªán 'google-genai' ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng ch·∫°y l·ªánh: pip install google-genai")
        exit()

    config = load_config()
    levels = load_levels() 
    
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True 
    flask_thread.start()
    
    try:
        # B·∫Øt ƒë·∫ßu ch·∫°y Bot Discord
        bot.run(TOKEN)
    except discord.errors.LoginFailure:
        print("L·ªñI: Token Discord kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i TOKEN ƒë√£ nh·∫≠p.")
    except Exception as e:
        print(f"L·ªói khi ch·∫°y Bot Discord: {e}")
        print("Vui l√≤ng ki·ªÉm tra l·∫°i TOKEN, API Key Gemini v√† Intents trong Developer Portal.")